
let {{structName}}$TypeCache = null;
{{#each fields}} 
const {{../structName}}${{customName}} = Symbol('{{customName}}');
{{/each}}

{{#if useESM}}{{#unless scoped}}export {{/unless}}{{/if}}class {{structName}} extends {{extendStructName}} {
  constructor(args) {
    super();
    {{#each fields}}
    this[{{../structName}}${{customName}}] = {{#if defaultValue}}{{{defaultValue}}}{{else}}null{{/if}};
    {{/each}}
    if (args) {
      {{#each fields}}
      this.{{customName}} = args.{{customName}};
      {{/each}}  
    }
  }
  {{#each fields}}

  get {{customName}}() { return this[{{../structName}}${{customName}}]; }
  set {{customName}}(val) {
    this[{{../structName}}${{customName}}] = this[{{../typeConvertKey}}](val, {{{typeStr}}}, '{{customName}}');
  }
  {{/each}}

  static get Type() {
    if ({{structName}}$TypeCache) return {{structName}}$TypeCache;
    {{structName}}$TypeCache = new Map();
    {{#each fields}}
    {{../structName}}$TypeCache.set({{id}}, { name: '{{name}}', customName: '{{customName}}', type: {{{typeStr}}} });
    {{/each}}
    return {{structName}}$TypeCache;
  }
}
{{#unless useESM}} 
{{#unless scoped}}
exports.{{structName}} = {{structName}};
{{/unless}}
{{/unless}}
