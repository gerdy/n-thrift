
let {{serviceName}}$TypeCache = null;

{{#if useESM}}export {{/if}}class {{serviceName}}Client extends {{extendServiceName}} {
  {{#each functions}}
  {{name}}({{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}}) {
    const args = { {{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}} };
    return this[{{../sendKey}}]('{{name}}', args);
  }

  {{/each}}
  static get Type() {
    if ({{serviceName}}$TypeCache) return {{serviceName}}$TypeCache;
    {{serviceName}}$TypeCache = new Map(super.constructor.Type);
    {{#each functions}}
    {{../serviceName}}$TypeCache.set('{{name}}', {
      customName: '{{name}}',
      argumentType: {{../serviceName}}${{name}}$Args,
      resultType: {{../serviceName}}${{name}}$Result,
      oneway: {{oneway}}
    });
    {{/each}}
    return {{serviceName}}$TypeCache;
  }
}
{{#unless useESM}}exports.{{serviceName}}Client = {{serviceName}}Client{{/unless}};
