
const {{serviceName}}$handler = Symbol('handler');

{{#if useESM}}export {{/if}}class {{serviceName}}Server extends {{extendServiceName}} {
  constructor(handler) {
    super();
    if(handler && typeof handler === 'object') {
      this[{{serviceName}}$handler] = handler;
    }
  }
  {{#each functions}}

  {{name}}({{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}}) {
    if (this[{{../serviceName}}$handler] === undefined || typeof this[{{../serviceName}}$handler].{{name}} !== 'function') {
      throw new Error('"{{../serviceName}}.{{name}}" is not implemented');
    }
    return this[{{../serviceName}}$handler].{{name}}.call(this[{{../serviceName}}$handler], {{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}});
  }
  {{/each}}

  static get Type() {
    if({{serviceName}}$TypeCache) return {{serviceName}}$TypeCache;
    {{serviceName}}$TypeCache = new Map();
    {{#each functions}}
    {{../serviceName}}$TypeCache.set('{{name}}', {
      customName: {{name}},
      argumentType: {{../serviceName}}${{name}}$Args,
      resultType: {{../serviceName}}${{name}}$Result,
      oneway: {{oneway}}
    });
    {{/each}}
    return {{serviceName}}$TypeCache;
  }
}
{{#unless useESM}}exports.{{serviceName}}Server = {{serviceName}}Server{{/unless}}
