{{#if useESM}}export {{/if}}class {{serviceName}}Client extends Client {
  {{#each functions}}

  {{name}}({{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}}) {
    const args = new {{../serviceName}}${{name}}$Args({ {{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}} });
    return this.send('{{name}}', args).then(input => {
      const result = new {{../serviceName}}${{name}}$Result();
      result.read(input);
      input.readMessageEnd();
      {{#if (unlessEq functionType "void")}}
      if (result.success !== null) {
        return result.success;
      }
      return Promise.reject(new Error('"{{../serviceName}}.{{name}}" request failed: unknown result'));
      {{/if}}
    }).catch(input => {
      const error = new Thrift.TApplicationException();
      error.read(input);
      input.readMessageEnd();
      return Promise.reject(error);
    });
  }
  {{/each}}
}

{{#unless useESM}}exports.{{serviceName}}Client = {{serviceName}}Client{{/unless}}
{{#if legacy}}
  {{#if useESM}} 
export const Client = {{serviceName}}Client;
  {{else}}
exports.Client = {{serviceName}}Client;
  {{/if}}
{{/if}}
