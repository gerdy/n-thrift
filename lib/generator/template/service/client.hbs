
let {{serviceName}}$TypeCache = null;

{{#if useESM}}export {{/if}}class {{serviceName}}Client extends {{extendServiceName}} {
  {{#each functions}}

  {{name}}({{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}}) {
    const args = { {{#forEach args}}{{customName}}{{#unless isLast}}, {{/unless}}{{/forEach}} };
    return this.send('{{name}}', args)
  }
  {{/each}}

  static get Types() {
    if({{serviceName}}$TypeCache) return {{serviceName}}$TypeCache;
    {{serviceName}}$TypeCache = new Map();
    {{#each functions}}
    {{../serviceName}}$TypeCache.set('{{name}}', {
      customName: {{name}},
      argumentType: {{../serviceName}}${{name}}$Args,
      resultType: {{../serviceName}}${{name}}$Result,
      oneway: {{oneway}}
    });
    {{/each}}
    return {{serviceName}}$TypeCache;
  }
}
{{#unless useESM}}exports.{{serviceName}}Client = {{serviceName}}Client{{/unless}}
{{#if legacy}}
  {{#if useESM}} 
export const Client = {{serviceName}}Client;
  {{else}}
exports.Client = {{serviceName}}Client;
  {{/if}}
{{/if}}
