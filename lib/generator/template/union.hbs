
let {{structName}}$TypeCache = null;
const {{structName}}$FieldName = Symbol('fieldName');
const {{structName}}$FieldValue = Symbol('fieldValue');

{{#if useESM}}export {{/if}}class {{structName}} extends {{extendStructName}} {
  constructor(args) {
    super();
    this[{{structName}}$FieldName] = null;
    this[{{structName}}$FieldValue] = null;
    if (args) {
      {{#each fields}}
      this.{{customName}} = args.{{customName}};
      {{/each}}  
    }
  }
  {{#each fields}}

  get {{customName}}() {
    if(this[{{../structName}}$FieldName] !== '{{customName}}') return null;
    return this[{{../structName}}$FieldValue];
  }
  set {{customName}}(val) {
    this[{{../structName}}$FieldName] = '{{customName}}';
    this[{{../structName}}$FieldValue] = this[{{../typeConvertKey}}](val, {{{typeStr}}}, '{{customName}}');
  }
  {{/each}}

  static get Types() {
    if({{structName}}$TypeCache) return {{structName}}$TypeCache;
    {{structName}}$TypeCache = new Map();
    {{#each fields}}
     {{../structName}}$TypeCache.set({{id}}, { name: '{{name}}', customName: '{{customName}}', type: {{{typeStr}}} });
    {{/each}}
    return {{structName}}$TypeCache;
  } 
}
{{#unless useESM}} 
exports.{{structName}} = {{structName}};
{{/unless}}
